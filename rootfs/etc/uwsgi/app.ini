[uwsgi]
strict = true                        ; Падаем на неизвестных параметрах
master = true                        ; Используем мастер процесс, который спавнит все остальное
vacuum = true                        ; Удаляем свои сокеты и файлы после выключения
enable-threads = true                ; Включаем GIL
no-threads-wait = true               ; Не ждать треды при выходе / релоаде
vacuum = true                        ; Очищаем tmp и sockets в момент выхода
single-interpreter = true            ; Ничего кроме plugin
die-on-term = true                   ; Выход по SIGTERM
need-app = true                      ; Не запускать без успешно загруженного приложения
                        
socket = 127.0.0.1:8000              ; Слушаем TCP сокет
buffer-size = 8000                   ; Буфер под заголовки запроса (тело не считаем)

plugin = python3
chdir = /opt/app/backend
module = cli:create_app()
py-call-osafterfork = true           ; Передавать сигналы в воркеры

lazy-apps = true                     ; Каждый воркер получает экземпляр приложения, а не мастер
processes = 4                        ; Максимум воркеров
cheaper = 1                          ; Минимум воркеров
cheaper-algo = spare                 ; Алгоритм увеличения кол-ва воркеров на основе занятости воркеров
cheaper-initial = 1                  ; Начальное количество воркеров
cheaper-step = 1                     ; Шаг увеличения количества воркеров
cheaper-overload = 30                ; Начинаем увеличение, если N секунд заняты все воркеры

harakiri = 60                        ; Принудительное завершение воркеров обрабатывающих запрос минуту
harakiri-verbose = true              ; Показываем факт убийств в логах
max-requests = 1000                  ; Рестартим воркеры после обработки этого колва запросов
max-worker-lifetime = 3600           ; Рестартим воркеры после времени существования в секундах
reload-on-rss = 80                   ; Рестартим воркеры съевшие больше MB памяти
